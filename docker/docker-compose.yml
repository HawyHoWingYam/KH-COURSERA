version: '3.8'

services:
  # PostgreSQL 数据库服务
  db:
    image: postgres:15-alpine
    container_name: gemini-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.py:/docker-entrypoint-initdb.d/init_db.py:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis 缓存服务 (用于会话管理和缓存)
  redis:
    image: redis:7-alpine
    container_name: gemini-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-default_redis_pass}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Database migration job (runs Alembic before backend starts)
  db-migrate:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      args:
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD)
    container_name: gemini-db-migrate
    restart: "no"
    command: ["sh", "-c", "echo 'Running Alembic migrations...' && alembic upgrade head && echo 'Alembic migrations complete.'"]
    volumes:
      - ./env:/app/env:ro
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gemini-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      args:
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD)
    container_name: gemini-backend
    restart: unless-stopped
    volumes:
      - ./env:/app/env:ro
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_redis_pass}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-southeast-1}
      # 传递AWS凭证 (生产环境中应使用IAM角色)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD)
    container_name: gemini-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: gemini-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL证书目录
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 数据库初始化服务 (运行一次后退出)
  db-init:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
    container_name: gemini-db-init
    restart: "no"
    command: ["python", "/app/init_db.py"]
    volumes:
      - ./env:/app/env:ro
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gemini-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "1"

  # 数据库健康检查服务 (定期检查)
  db-healthcheck:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
    container_name: gemini-db-healthcheck
    restart: unless-stopped
    command: ["sh", "-c", "while true; do python /app/check_db.py; sleep 3600; done"]
    volumes:
      - ./env:/app/env:ro
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gemini-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  gemini-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
