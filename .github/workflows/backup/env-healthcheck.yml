name: Environment Health Check

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS region for Secrets Manager checks"
        required: false
        default: "ap-southeast-1"

permissions:
  contents: read

jobs:
  check-github-environments:
    name: Check GitHub Environments
    runs-on: ubuntu-latest
    steps:
      - name: Verify 'uat' and 'production' environments exist
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const res = await github.request('GET /repos/{owner}/{repo}/environments', { owner, repo });
            const names = res.data.environments.map(e => e.name);
            core.info(`Found environments: ${names.join(', ')}`);
            const missing = ['uat','production'].filter(n => !names.includes(n));
            if (missing.length) {
              core.setFailed(`Missing environments: ${missing.join(', ')}. Create them in Settings â†’ Environments and set Required reviewers.`);
            }

  check-aws-secrets:
    name: Check AWS Secrets (optional)
    runs-on: ubuntu-latest
    if: ${{ secrets.AWS_ROLE_TO_ASSUME != '' || secrets.AWS_ACCESS_KEY_ID != '' }}
    steps:
      - name: Configure AWS credentials (role)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Configure AWS credentials (keys)
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Validate Secrets Manager entries
        run: |
          set -e
          for name in sandbox/database uat/database prod/database; do
            echo "Checking secret: $name"
            if ! aws secretsmanager describe-secret --secret-id "$name" >/dev/null 2>&1; then
              echo "::error::Secret not found: $name"; exit 1; fi
            raw=$(aws secretsmanager get-secret-value --secret-id "$name" --query SecretString --output text)
            python - <<'PY'
import json, os, sys
raw = os.environ['RAW']
try:
  data = json.loads(raw)
  url = data.get('database_url')
  assert url and isinstance(url, str)
  print('OK database_url:', url.split('@')[-1])
except Exception as e:
  print('::error::Secret missing database_url or invalid JSON', e)
  sys.exit(1)
PY
            unset RAW
          done
        env:
          RAW: ""

