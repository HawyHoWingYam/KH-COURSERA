name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: karasho62/hya-ocr-sandbox
  
jobs:
  # Detect changes to optimize builds
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          backend:
            - 'GeminiOCR/backend/**'
            - 'GeminiOCR/backend.Dockerfile'
            - 'GeminiOCR/docker-compose*.yml'
            - '.github/workflows/**'
          frontend:
            - 'GeminiOCR/frontend/**'
            - 'GeminiOCR/frontend.Dockerfile'
            - 'GeminiOCR/docker-compose*.yml'
            - '.github/workflows/**'

  # Build and Test Phase
  build-and-test:
    name: Build, Test & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      fail-fast: false
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Skip if no changes for this service
      if: |
        (matrix.service == 'backend' && needs.detect-changes.outputs.backend != 'true' && !startsWith(github.ref, 'refs/tags/')) ||
        (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend != 'true' && !startsWith(github.ref, 'refs/tags/'))
      run: |
        echo "Skipping ${{ matrix.service }} build - no changes detected"
        exit 0
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run backend linting (ruff)
      if: matrix.service == 'backend'
      run: |
        cd GeminiOCR/backend
        pip install ruff
        ruff check . --output-format=github
        ruff format --check .
    
    - name: Run frontend linting (eslint)
      if: matrix.service == 'frontend'
      continue-on-error: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') }}
      run: |
        cd GeminiOCR/frontend
        npm ci --no-audit --fund=false
        npm run lint -- --max-warnings=0
    
    - name: Run Dockerfile linting (hadolint)
      run: |
        # Install hadolint
        wget -O /tmp/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x /tmp/hadolint
        
        # Lint the Dockerfile for this service
        /tmp/hadolint GeminiOCR/${{ matrix.service }}.Dockerfile || echo "Dockerfile linting completed with warnings"
    
    - name: Generate build metadata
      id: meta
      run: |
        # Generate semantic version based on Git tags and branch
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        else
          VERSION="dev-$(date +%Y%m%d)-${GITHUB_SHA::8}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
        fi
        
        # Build metadata
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "VCS_REF=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "BUILD_VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build Docker image (${{ matrix.service }})
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: ./GeminiOCR
        file: ./GeminiOCR/${{ matrix.service }}.Dockerfile
        load: true
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ steps.meta.outputs.VERSION }}
          ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
        build-args: |
          BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
          VCS_REF=${{ steps.meta.outputs.VCS_REF }}
          VERSION=${{ steps.meta.outputs.BUILD_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        labels: |
          org.opencontainers.image.title=GeminiOCR-${{ matrix.service }}
          org.opencontainers.image.description=GeminiOCR ${{ matrix.service }} service
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
          org.opencontainers.image.created=${{ steps.meta.outputs.BUILD_DATE }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
    
    - name: Run security scan with Trivy
      uses: aquasecurity/trivy-action@0.25.0
      with:
        image-ref: ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      if: ${{ github.event_name != 'pull_request' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
    
    - name: Test image health
      run: |
        # Start the container for health testing
        if [ "${{ matrix.service }}" = "backend" ]; then
          docker run -d --name test-${{ matrix.service }} \
            -p 8000:8000 \
            -e DATABASE_URL=sqlite:///./test.db \
            -e ENVIRONMENT=test \
            ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
          
          # Wait for container to start and check logs
          echo "Waiting for backend container to start..."
          sleep 10
          docker logs test-${{ matrix.service }}
          
          # Health check with retries
          echo "Starting health checks..."
          for i in {1..12}; do
            if curl -f http://localhost:8000/health; then
              echo "✅ Backend health check passed!"
              break
            else
              echo "❌ Health check attempt $i/12 failed, retrying in 10s..."
              if [ $i -eq 12 ]; then
                echo "Container logs:"
                docker logs test-${{ matrix.service }}
                exit 1
              fi
              sleep 10
            fi
          done
          
        elif [ "${{ matrix.service }}" = "frontend" ]; then
          docker run -d --name test-${{ matrix.service }} \
            -p 3000:3000 \
            -e NEXT_PUBLIC_API_URL=http://localhost:8000 \
            ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
          
          # Wait for container to start and check logs
          echo "Waiting for frontend container to start..."
          sleep 15
          docker logs test-${{ matrix.service }}
          
          # Health check with retries
          echo "Starting health checks..."
          for i in {1..10}; do
            if curl -f http://localhost:3000/ >/dev/null 2>&1; then
              echo "✅ Frontend health check passed!"
              break
            else
              echo "❌ Health check attempt $i/10 failed, retrying in 15s..."
              if [ $i -eq 10 ]; then
                echo "Container logs:"
                docker logs test-${{ matrix.service }}
                exit 1
              fi
              sleep 15
            fi
          done
        fi
        
        # Cleanup
        docker stop test-${{ matrix.service }} || true
        docker rm test-${{ matrix.service }} || true
    
    - name: Export image for integration tests
      run: |
        docker save ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }} \
          -o ${{ matrix.service }}-image.tar
    
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-image
        path: ${{ matrix.service }}-image.tar
        retention-days: 1

  # Integration Testing Phase
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download backend image
      if: needs.detect-changes.outputs.backend == 'true'
      uses: actions/download-artifact@v4
      with:
        name: backend-image
    
    - name: Download frontend image  
      if: needs.detect-changes.outputs.frontend == 'true'
      uses: actions/download-artifact@v4
      with:
        name: frontend-image
    
    - name: Load Docker images
      run: |
        # Load backend image if it was built
        if [ -f "backend-image.tar" ]; then
          echo "Loading backend image..."
          docker load -i backend-image.tar
        else
          echo "Backend image not found, using existing image"
        fi
        
        # Load frontend image if it was built
        if [ -f "frontend-image.tar" ]; then
          echo "Loading frontend image..."
          docker load -i frontend-image.tar
        else
          echo "Frontend image not found, using existing image"
        fi
    
    - name: Start integration test environment
      run: |
        cd GeminiOCR
        # Create test environment file
        cat > .env.test << EOF
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password  
        POSTGRES_DB=test_db
        REDIS_PASSWORD=test_redis_password
        EOF
        
        # Start test stack with built images or fallbacks
        if [ "${{ needs.detect-changes.outputs.backend }}" = "true" ]; then
          export BACKEND_IMAGE="${{ env.DOCKER_REPOSITORY }}:backend-${{ github.sha }}"
          echo "Using newly built backend image: $BACKEND_IMAGE"
        else
          export BACKEND_IMAGE="${{ env.DOCKER_REPOSITORY }}:backend-latest"
          echo "Using fallback backend image: $BACKEND_IMAGE"
          # Try to pull the latest image as fallback
          docker pull $BACKEND_IMAGE || echo "Warning: Could not pull fallback backend image"
        fi
        
        if [ "${{ needs.detect-changes.outputs.frontend }}" = "true" ]; then
          export FRONTEND_IMAGE="${{ env.DOCKER_REPOSITORY }}:frontend-${{ github.sha }}"
          echo "Using newly built frontend image: $FRONTEND_IMAGE"
        else
          export FRONTEND_IMAGE="${{ env.DOCKER_REPOSITORY }}:frontend-latest"
          echo "Using fallback frontend image: $FRONTEND_IMAGE"
          # Try to pull the latest image as fallback
          docker pull $FRONTEND_IMAGE || echo "Warning: Could not pull fallback frontend image"
        fi
        
        docker compose -f docker-compose.ci.yml up -d
    
    - name: Run integration tests
      run: |
        cd GeminiOCR
        # Wait for services to be ready
        sleep 60
        
        # Check container status first
        echo "=== Container Status ==="
        docker compose -f docker-compose.ci.yml ps
        
        # Show logs if any container is unhealthy
        echo "=== Backend Logs ==="
        docker compose -f docker-compose.ci.yml logs backend || true
        
        echo "=== Database Logs ==="
        docker compose -f docker-compose.ci.yml logs db || true
        
        # Test backend health with retry logic
        echo "=== Testing Backend Health ==="
        for i in {1..5}; do
          if curl -fsS http://localhost:8000/health; then
            echo "✅ Backend health check passed!"
            break
          else
            echo "❌ Backend health check attempt $i/5 failed, retrying in 10s..."
            if [ $i -eq 5 ]; then
              echo "Backend logs:"
              docker compose -f docker-compose.ci.yml logs backend
              exit 1
            fi
            sleep 10
          fi
        done
        
        # Test frontend with retry logic
        echo "=== Testing Frontend ==="
        for i in {1..5}; do
          if curl -fsS http://localhost:3000/ > /dev/null; then
            echo "✅ Frontend health check passed!"
            break
          else
            echo "❌ Frontend health check attempt $i/5 failed, retrying in 15s..."
            if [ $i -eq 5 ]; then
              echo "Frontend logs:"
              docker compose -f docker-compose.ci.yml logs frontend
              exit 1
            fi
            sleep 15
          fi
        done
        
        # Test API endpoints
        echo "=== Testing API Documentation ==="
        curl -fsS http://localhost:8000/docs > /dev/null || {
          echo "❌ API docs endpoint failed"
          docker compose -f docker-compose.ci.yml logs backend
          exit 1
        }
        
        echo "✅ Integration tests completed successfully"
    
    - name: Cleanup test environment
      if: always()
      run: |
        cd GeminiOCR
        docker compose -f docker-compose.ci.yml down -v

  # Publish Phase (only for main branch and tags)
  publish:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [detect-changes, build-and-test, integration-test]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) &&
      (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/'))
    
    strategy:
      fail-fast: false
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Skip if no changes for this service
      if: |
        (matrix.service == 'backend' && needs.detect-changes.outputs.backend != 'true' && !startsWith(github.ref, 'refs/tags/')) ||
        (matrix.service == 'frontend' && needs.detect-changes.outputs.frontend != 'true' && !startsWith(github.ref, 'refs/tags/'))
      run: |
        echo "Skipping ${{ matrix.service }} publish - no changes detected"
        exit 0
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Generate Docker metadata
      id: docker-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPOSITORY }}
        tags: |
          type=ref,event=tag,pattern=v*,prefix=${{ matrix.service }}-
          type=ref,event=branch,enable={{is_default_branch}},prefix=${{ matrix.service }}-
          type=ref,event=branch,enable={{is_default_branch}},prefix=${{ matrix.service }}-,suffix=-{{sha}}
          type=raw,value=${{ matrix.service }}-latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=GeminiOCR-${{ matrix.service }}
          org.opencontainers.image.description=GeminiOCR ${{ matrix.service }} service
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.licenses=MIT
    
    - name: Generate publish metadata
      id: meta
      run: |
        # Generate build metadata for docker/metadata-action compatibility
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "VCS_REF=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      timeout-minutes: 20
      with:
        context: ./GeminiOCR
        file: ./GeminiOCR/${{ matrix.service }}.Dockerfile
        push: true
        tags: ${{ steps.docker-meta.outputs.tags }}
        labels: ${{ steps.docker-meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
          VCS_REF=${{ steps.meta.outputs.VCS_REF }}
          VERSION=${{ steps.docker-meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        sbom: true
        provenance: true

  # Deploy to Staging (for main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: publish
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Backend image: ${{ env.DOCKER_REPOSITORY }}:backend-latest"
        echo "Frontend image: ${{ env.DOCKER_REPOSITORY }}:frontend-latest"
        
        # Here you would add actual deployment steps to your staging environment
        # For example, using SSH to deploy to a staging server:
        # - Setup SSH keys
        # - Connect to staging server
        # - Pull new images
        # - Run deployment script
        
        echo "✅ Staging deployment completed"

  # Create Release (for tags)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: publish
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## GeminiOCR Release ${{ github.ref_name }}
          
          ### Docker Images Published
          - `${{ env.DOCKER_REPOSITORY }}:backend-${{ github.ref_name }}`
          - `${{ env.DOCKER_REPOSITORY }}:frontend-${{ github.ref_name }}`
          - `${{ env.DOCKER_REPOSITORY }}:backend-latest`
          - `${{ env.DOCKER_REPOSITORY }}:frontend-latest`
          
          ### Deployment Command
          ```bash
          # For production deployment
          export VERSION=${{ github.ref_name }}
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d
          ```
          
          ### Changes
          See commit history for detailed changes.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
