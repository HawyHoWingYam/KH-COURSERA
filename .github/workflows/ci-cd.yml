name: Simplified CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  security-events: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY_SANDBOX: karasho62/hya-ocr-sandbox
  DOCKER_REPOSITORY_PRODUCTION: karasho62/hya-ocr-production

jobs:
  # 简化版构建和部署
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Docker repository
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          echo "DOCKER_REPOSITORY=${{ env.DOCKER_REPOSITORY_PRODUCTION }}" >> $GITHUB_ENV
        else
          echo "DOCKER_REPOSITORY=${{ env.DOCKER_REPOSITORY_SANDBOX }}" >> $GITHUB_ENV
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.6.1

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 极简代码检查
    - name: Quick code check
      continue-on-error: true
      run: |
        if [ "${{ matrix.service }}" = "backend" ]; then
          cd GeminiOCR/backend
          pip install ruff || true
          ruff check . --output-format=github || echo "Ruff completed with warnings"
        elif [ "${{ matrix.service }}" = "frontend" ]; then
          cd GeminiOCR/frontend
          npm ci --no-audit --fund=false || echo "npm install completed"
          npm run lint -- --max-warnings=200 || echo "ESLint completed with warnings"
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: ./GeminiOCR
        file: ./docker/${{ matrix.service }}.Dockerfile
        push: ${{ github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        load: ${{ github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') }}
        tags: |
          ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}
          ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    # 快速健康检查
    - name: Quick health test
      timeout-minutes: 3
      continue-on-error: true
      run: |
        if [ "${{ matrix.service }}" = "backend" ]; then
          docker run -d --name test-${{ matrix.service }} \
            -p 8000:8000 \
            -e DATABASE_URL=sqlite:///./test.db \
            -e ENVIRONMENT=test \
            ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}

          sleep 15
          curl -f http://localhost:8000/health || echo "Health check warning"

        elif [ "${{ matrix.service }}" = "frontend" ]; then
          docker run -d --name test-${{ matrix.service }} \
            -p 3000:3000 \
            ${{ env.DOCKER_REPOSITORY }}:${{ matrix.service }}-${{ github.sha }}

          sleep 20
          curl -f http://localhost:3000/ || echo "Frontend check warning"
        fi

        docker stop test-${{ matrix.service }} || true
        docker rm test-${{ matrix.service }} || true

  # 简化状态报告
  status:
    name: Status Report
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [build-and-deploy]
    if: always()

    steps:
    - name: Generate status report
      run: |
        echo "# 🚀 CI/CD Pipeline Status"
        echo "=========================="
        echo ""
        echo "**Branch**: ${{ github.ref }}"
        echo "**Trigger**: ${{ github.event_name }}"
        echo "**Build Result**: ${{ needs.build-and-deploy.result }}"
        echo ""

        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "✅ Develop branch - Images pushed to sandbox repository"
          echo "📦 Images: karasho62/hya-ocr-sandbox:backend-latest, frontend-latest"
          echo "🚀 Ready for Production EC2 deployment!"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "✅ Main branch - Images pushed to production repository"
        fi