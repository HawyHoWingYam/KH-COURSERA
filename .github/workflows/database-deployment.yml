name: Database Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'GeminiOCR/backend/migrations/**'
      - 'GeminiOCR/backend/db/**'
      - 'terraform/**'
      - '.github/workflows/database-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'GeminiOCR/backend/migrations/**'
      - 'GeminiOCR/backend/db/**'
      - 'terraform/**'

permissions:
  contents: read
  id-token: write  # Required for AWS OIDC

concurrency:
  group: database-deployment-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Database operations should not be cancelled

env:
  AWS_REGION: ap-southeast-1
  TERRAFORM_VERSION: 1.6.0
  PYTHON_VERSION: 3.11

jobs:
  # Detect changes to determine what to deploy
  detect-changes:
    name: Detect Infrastructure Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      terraform: ${{ steps.changes.outputs.terraform }}
      migrations: ${{ steps.changes.outputs.migrations }}
      models: ${{ steps.changes.outputs.models }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          terraform:
            - 'terraform/**'
          migrations:
            - 'GeminiOCR/backend/migrations/**'
          models:
            - 'GeminiOCR/backend/db/**'

  # Plan Terraform changes
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform == 'true'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'production' || 'sandbox' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: terraform-plan-${{ matrix.environment }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Terraform Init
      working-directory: terraform/environments/${{ matrix.environment }}
      run: terraform init
    
    - name: Terraform Validate
      working-directory: terraform/environments/${{ matrix.environment }}
      run: terraform validate
    
    - name: Terraform Plan
      working-directory: terraform/environments/${{ matrix.environment }}
      run: |
        terraform plan -detailed-exitcode \\
          -var="database_master_password=${{ secrets.DATABASE_MASTER_PASSWORD }}" \\
          -out=tfplan
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: terraform/environments/${{ matrix.environment }}/tfplan
        retention-days: 5

  # Apply Terraform changes (only on main branch)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [detect-changes, terraform-plan]
    if: |
      needs.detect-changes.outputs.terraform == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    environment:
      name: production-infrastructure
      url: https://console.aws.amazon.com/rds/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: terraform-apply-production
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-production
        path: terraform/environments/production/
    
    - name: Terraform Init
      working-directory: terraform/environments/production
      run: terraform init
    
    - name: Terraform Apply
      working-directory: terraform/environments/production
      run: terraform apply -auto-approve tfplan
    
    - name: Export Terraform Outputs
      working-directory: terraform/environments/production
      run: |
        echo "AURORA_WRITER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV
        echo "AURORA_READER_ENDPOINT=$(terraform output -raw cluster_reader_endpoint)" >> $GITHUB_ENV
        echo "DATABASE_SECRET_ARN=$(terraform output -raw secrets_manager_arn)" >> $GITHUB_ENV

  # Validate migrations
  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.migrations == 'true' ||
      needs.detect-changes.outputs.models == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hya_ocr_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: GeminiOCR/backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic
    
    - name: Test migration on clean database
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: local
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/hya_ocr_test
      run: |
        # Initialize and run migrations
        python scripts/manage_migrations.py init
        
        # Validate schema
        python scripts/manage_migrations.py validate
        
        # Test rollback capability
        python scripts/manage_migrations.py downgrade
        python scripts/manage_migrations.py upgrade

  # Deploy migrations to staging
  deploy-migrations-staging:
    name: Deploy Migrations (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, validate-migrations]
    if: |
      needs.detect-changes.outputs.migrations == 'true' &&
      github.ref == 'refs/heads/develop' &&
      github.event_name == 'push'
    environment:
      name: staging-database
      url: https://console.aws.amazon.com/rds/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: migrate-staging
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: GeminiOCR/backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic boto3
    
    - name: Get database credentials from Secrets Manager
      run: |
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "hya-ocr/sandbox/database/credentials" --region ${{ env.AWS_REGION }} --query SecretString --output text)
        echo "AURORA_WRITER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .host)" >> $GITHUB_ENV
        echo "AURORA_READER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .readonly_host)" >> $GITHUB_ENV
        echo "DATABASE_USERNAME=$(echo $SECRET_VALUE | jq -r .username)" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=$(echo $SECRET_VALUE | jq -r .password)" >> $GITHUB_ENV
    
    - name: Test database connection
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: sandbox
      run: |
        python scripts/switch_db_env.py --test
    
    - name: Run database migrations
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: sandbox
      run: |
        echo "📊 Current migration status:"
        python scripts/manage_migrations.py status
        
        echo "🚀 Applying migrations:"
        python scripts/manage_migrations.py upgrade
        
        echo "✅ Post-migration status:"
        python scripts/manage_migrations.py status

  # Deploy migrations to production (manual approval required)
  deploy-migrations-production:
    name: Deploy Migrations (Production)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [detect-changes, validate-migrations, terraform-apply]
    if: |
      needs.detect-changes.outputs.migrations == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    environment:
      name: production-database
      url: https://console.aws.amazon.com/rds/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: migrate-production
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: GeminiOCR/backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install alembic boto3
    
    - name: Get database credentials from Secrets Manager
      run: |
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "hya-ocr/production/database/credentials" --region ${{ env.AWS_REGION }} --query SecretString --output text)
        echo "AURORA_WRITER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .host)" >> $GITHUB_ENV
        echo "AURORA_READER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .readonly_host)" >> $GITHUB_ENV
        echo "DATABASE_USERNAME=$(echo $SECRET_VALUE | jq -r .username)" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=$(echo $SECRET_VALUE | jq -r .password)" >> $GITHUB_ENV
    
    - name: Pre-migration backup verification
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: production
      run: |
        echo "🔍 Verifying recent backups exist..."
        aws rds describe-db-cluster-snapshots \\
          --db-cluster-identifier production-hya-ocr-aurora-postgresql \\
          --max-items 5 \\
          --query 'DBClusterSnapshots[0].{SnapshotCreateTime:SnapshotCreateTime,Status:Status}'
    
    - name: Test database connection
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: production
      run: |
        python scripts/switch_db_env.py --test
    
    - name: Pre-migration status check
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: production
      run: |
        echo "📊 Pre-migration status:"
        python scripts/manage_migrations.py status
        
        echo "🔍 Validating current schema:"
        python scripts/manage_migrations.py validate
    
    - name: Run database migrations with safety checks
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: production
      run: |
        echo "🚀 Applying production migrations:"
        python scripts/manage_migrations.py upgrade
        
        echo "✅ Post-migration validation:"
        python scripts/manage_migrations.py validate
        
        echo "📊 Final status:"
        python scripts/manage_migrations.py status
    
    - name: Post-migration health check
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: production
      run: |
        echo "🏥 Database health check:"
        python scripts/switch_db_env.py --test

  # Database health monitoring
  database-health-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    needs: [deploy-migrations-staging, deploy-migrations-production]
    
    strategy:
      matrix:
        environment: [sandbox, production]
        include:
          - environment: sandbox
            secret_name: "hya-ocr/sandbox/database/credentials"
          - environment: production
            secret_name: "hya-ocr/production/database/credentials"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: health-check-${{ matrix.environment }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: GeminiOCR/backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install boto3
    
    - name: Get database credentials
      run: |
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${{ matrix.secret_name }}" --region ${{ env.AWS_REGION }} --query SecretString --output text)
        echo "AURORA_WRITER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .host)" >> $GITHUB_ENV
        echo "AURORA_READER_ENDPOINT=$(echo $SECRET_VALUE | jq -r .readonly_host)" >> $GITHUB_ENV
        echo "DATABASE_USERNAME=$(echo $SECRET_VALUE | jq -r .username)" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=$(echo $SECRET_VALUE | jq -r .password)" >> $GITHUB_ENV
    
    - name: Health check
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: ${{ matrix.environment }}
      run: |
        echo "🏥 Health check for ${{ matrix.environment }} environment:"
        python scripts/switch_db_env.py --test
    
    - name: Performance check
      working-directory: GeminiOCR/backend
      env:
        DATABASE_ENV: ${{ matrix.environment }}
      run: |
        echo "⚡ Performance metrics for ${{ matrix.environment }}:"
        python -c "
import asyncio
from database_manager import health_check
health = asyncio.run(health_check())
print(f'Write latency: {health.get(\"write_latency_ms\", \"N/A\")}ms')
print(f'Read latency: {health.get(\"read_latency_ms\", \"N/A\")}ms')
print(f'Status: {health.get(\"status\", \"unknown\")}')
"