name: Database Migration

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "Target environment"
        type: choice
        options: [sandbox, uat, production, custom_url]
        default: sandbox
      secret_name:
        description: "Secrets Manager name (ignored if custom_url)"
        required: false
        default: "sandbox/database"
      database_url:
        description: "Direct DATABASE_URL (used only when target_env=custom_url)"
        required: false
      aws_region:
        description: "AWS region for Secrets Manager"
        default: "ap-southeast-1"
        required: false

jobs:
  migrate:
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: GeminiOCR/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials (role)
        if: ${{ github.event.inputs.target_env != 'custom_url' && secrets.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Configure AWS credentials (keys)
        if: ${{ github.event.inputs.target_env != 'custom_url' && secrets.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Resolve DATABASE_URL from Secrets Manager
        if: ${{ github.event.inputs.target_env != 'custom_url' }}
        run: |
          SECRET_NAME="${{ github.event.inputs.secret_name }}"
          if [ -z "$SECRET_NAME" ]; then
            case "${{ github.event.inputs.target_env }}" in
              sandbox) SECRET_NAME="sandbox/database" ;;
              uat) SECRET_NAME="uat/database" ;;
              production) SECRET_NAME="prod/database" ;;
            esac
          fi
          echo "Fetching secret: $SECRET_NAME"
          RAW=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text)
          # Parse with Python to be robust
          DB_URL=$(python - <<'PY'
import json, os
raw = os.environ['RAW']
data = json.loads(raw)
print(data.get('database_url',''))
PY
)
          if [ -z "$DB_URL" ]; then
            echo "No database_url in secret" >&2
            exit 1
          fi
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV
        env:
          RAW: ${{ steps.resolve_secrets.outputs.raw || '' }}

      - name: Use direct DATABASE_URL
        if: ${{ github.event.inputs.target_env == 'custom_url' }}
        run: |
          if [ -z "${{ github.event.inputs.database_url }}" ]; then
            echo "database_url input required for custom_url" >&2
            exit 1
          fi
          echo "DATABASE_URL=${{ github.event.inputs.database_url }}" >> $GITHUB_ENV

      - name: Run Alembic upgrade head
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "Using DATABASE_URL host: $(python - <<'PY'
import os, re
url = os.environ.get('DATABASE_URL','')
print(re.sub(r"^.*@","", url))
PY
)"
          bash ./scripts/manage_migrations.sh upgrade head
