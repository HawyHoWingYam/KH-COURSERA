---
description: 
globs: 
alwaysApply: true
---
### **Part 1: Core Architecture & Technology Stack**

This section outlines the foundational technologies and services for the platform.

- **Frontend:** **Next.js**
    - A React-based framework for building the user interface (UI) for the Admin and User portals.
- **Backend:** **Python & FastAPI**
    - Will serve as the central API for all business logic, AI processing, and database interactions.
    - Will utilize **WebSockets** for real-time communication with the frontend during immediate processing jobs.
- **Database:** **Amazon Aurora (PostgreSQL Compatible)**
    - A relational database for storing all structured data, including user information, job records, and department data.
- **File Storage:** **Amazon S3 (Simple Storage Service)**
    - Used for storing all unstructured data, including raw PDFs, processed JSON/Excel files, and document type configurations.
- **Authentication:** **AWS Cognito**
    - A managed service for all user authentication, including sign-up, sign-in, and integration with third-party providers.
- **Automated File Ingestion:** **AWS DataSync**
    - Used to automatically synchronize files from an on-premise Windows server to Amazon S3.
- **Scheduled Jobs:** **Amazon EventBridge Scheduler**
    - A serverless scheduler to trigger recurring backend jobs (e.g., daily batch processing).

---

### **Part 2: Data & Schema Design**

This section details the structure of the data at rest in both the database and file storage.

#### **Amazon S3 Bucket Structure**

A single S3 bucket will be organized with the following prefix structure to maintain clarity:

- `s3://your-bucket-name/uploads/{department_name}/`: Destination for raw PDF files uploaded from the on-premise server. The `{department_name}` will be derived from the source folder name (e.g., `Dept_A`).
- `s3://your-bucket-name/processed/json/`: Stores the JSON output from the Gemini API.
- `s3://your-bucket-name/processed/excel/`: Stores the Excel files generated from the JSON data.
- `s3://your-bucket-name/configs/prompts/`: Stores all `prompt.txt` and `schema.json` files that define each document type.

#### **Amazon Aurora Database Schema**

The PostgreSQL database will consist of the following interconnected tables:

- **`departments` Table**
    - `department_id` (SERIAL, Primary Key): Unique identifier for the department.
    - `department_name` (VARCHAR, UNIQUE, NOT NULL): The name of the department (e.g., "Finance", "HR").
- **`users` Table**
    - `user_id` (SERIAL, Primary Key): Unique identifier for the user.
    - `cognito_sub` (UUID, UNIQUE, NOT NULL): The unique identifier from AWS Cognito, linking the database user to the authentication service.
    - `name` (VARCHAR, NOT NULL): The user's full name.
    - `email` (VARCHAR, UNIQUE, NOT NULL): The user's email address.
    - `role` (VARCHAR, NOT NULL, DEFAULT 'user'): The user's role ('admin' or 'user').
    - `department_id` (INTEGER, Foreign Key -> `departments.department_id`, NULLABLE): The department the user belongs to. If `NULL`, the user is "unassigned".
- **`document_types` Table**
    - `doc_type_id` (SERIAL, Primary Key): Unique identifier for the document type.
    - `type_name` (VARCHAR, UNIQUE, NOT NULL): The friendly name for the document type (e.g., "Supplier ABC Invoice").
    - `s3_prompt_path` (VARCHAR, NOT NULL): The S3 path to the `prompt.txt` file.
    - `s3_schema_path` (VARCHAR, NOT NULL): The S3 path to the `schema.json` file.
- **`department_doc_type_access` Table (Many-to-Many Relationship)**
    - `department_id` (INTEGER, Foreign Key -> `departments.department_id`): Links to a department.
    - `doc_type_id` (INTEGER, Foreign Key -> `document_types.doc_type_id`): Links to an accessible document type.
- **`processing_jobs` Table**
    - `job_id` (SERIAL, Primary Key): Unique identifier for the processing job.
    - `original_filename` (VARCHAR, NOT NULL): The original name of the uploaded file.
    - `s3_pdf_path` (VARCHAR, NOT NULL): S3 path to the raw PDF file.
    - `s3_json_path` (VARCHAR, NULLABLE): S3 path to the processed JSON file.
    - `s3_excel_path` (VARCHAR, NULLABLE): S3 path to the processed Excel file.
    - `status` (VARCHAR, NOT NULL): The current state of the job ('pending', 'processing', 'success', 'failed').
    - `error_message` (TEXT, NULLABLE): Stores any error messages if the job fails.
    - `uploader_user_id` (INTEGER, Foreign Key -> `users.user_id`, NOT NULL): The user who initiated the job.
    - `doc_type_id` (INTEGER, Foreign Key -> `document_types.doc_type_id`, NOT NULL): The document type used for processing.
    - `created_at` (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP): When the job was created.
- **`api_usage` Table**
    - `usage_id` (SERIAL, Primary Key): Unique identifier for the API call log.
    - `job_id` (INTEGER, Foreign Key -> `processing_jobs.job_id`, NOT NULL): The job associated with this API call.
    - `input_token_count` (INTEGER, NOT NULL): Tokens used for the input prompt.
    - `output_token_count` (INTEGER, NOT NULL): Tokens generated in the response.
    - `api_call_timestamp` (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP): When the API call was made.

---

### **Part 3: User Management & Permissions**

This section defines user roles, authentication flows, and access control.

- **Authentication Flow:**
    1. **Phase 1 (Initial Build):** Users will register and log in with a username (email) and password via a standard AWS Cognito-hosted UI.
    2. **Phase 2 (Enhancement):** Cognito will be federated with Microsoft Entra ID (Azure AD) to enable Single Sign-On (SSO).
    3. **MFA Enforcement:** After SSO is implemented, any user still logging in directly with a username/password will be required by Cognito to set up and use Multi-Factor Authentication (MFA).
- **User Roles & Permissions:**
    - **Admin:**
        - Can view and manage all users, departments, and document types.
        - Can view and re-trigger jobs from all users and departments.
        - Has access to the global, system-wide dashboard with filtering capabilities.
        - Can configure global settings like the Gemini API key.
    - **User:**
        - Can only view and manage their own profile.
        - Can view and re-trigger their own jobs and all jobs belonging to other users **within the same department**.
        - Has access to a dashboard scoped to their department's data only.
        - When uploading, the list of available document types is restricted to those assigned to their department.
- **Department Management (Admin Portal):**
    - Admins will have a dedicated UI to **Create, Rename, and Delete** departments.
    - If a department is deleted, any users assigned to it will have their `department_id` set to `NULL`, effectively making them "unassigned" until an admin reassigns them.

---

### **Part 4: End-to-End Workflow & Logic**

This section describes the complete lifecycle of a document from upload to completion.

1. **Automated Ingestion & Department Tagging:**
    - The **AWS DataSync Agent** on the Windows server monitors parent folders named after departments (e.g., `\\server\share\Dept_A`, `\\server\share\Dept_B`).
    - When a new PDF is added, DataSync uploads it to the corresponding S3 folder: `s3://your-bucket-name/uploads/Dept_A/`.
    - The FastAPI backend will need a mechanism (likely another Lambda trigger on S3) to create a `processing_jobs` record, extract the department name from the S3 path, and set the job's initial `status` to 'pending'.
2. **Scheduled Processing:**
    - Once daily, **Amazon EventBridge Scheduler** triggers a FastAPI endpoint.
    - The endpoint queries the database for all jobs with `status = 'pending'`.
    - It iterates through each job, executing the Core AI Processing logic described below.
3. **Immediate Processing:**
    - A user uploads a file via the Next.js UI and selects a document type.
    - The frontend establishes a **WebSocket** connection.
    - The backend immediately begins the Core AI Processing logic, sending real-time status updates (`'Processing...'`, `'Generating Excel...'`) over the WebSocket.
4. **Core AI Processing (FastAPI Backend):**
    - For a given `job_id`, the service performs these steps: a. Sets `status` to 'processing'. b. Downloads the PDF from its `s3_pdf_path`. c. Retrieves the job's `doc_type_id` and fetches the corresponding `prompt.txt` and `schema.json` from S3. d. Calls the Google Gemini API with the document content and prompt. e. **On Success:** i. Logs the `input_token_count` and `output_token_count` to the `api_usage` table. ii. Saves the returned JSON to `s3://processed/json/` and the generated Excel to `s3://processed/excel/`. iii. Updates the `processing_jobs` record with the file paths and sets `status` to 'success'. f. **On Failure:** i. Logs the error details to the `error_message` field. ii. Sets `status` to 'failed'.
5. **Manual Re-triggering Logic:**
    - In the UI, a user or admin can click a "Retry" button on a failed job.
    - This will open a modal allowing them to confirm the action. Crucially, they will be able to **change the assigned Document Type** before re-submitting.
    - Upon submission, the backend will create a **new** `processing_jobs` record (to preserve the history of the original failure) linked to the original file and begin processing.

---

### **Part 5: Application Portals & Features**

This section details the features available in the Next.js frontend.

#### **Admin Portal**

- **Dashboard:**
    - Displays global performance metrics.
    - Widgets for: "Average Processing Time", "Success vs. Failed Jobs (Today/This Month)", "Total API Calls".
    - A chart showing daily/monthly `input` and `output` token usage for cost analysis.
    - **Key Feature:** All dashboard widgets will have a dropdown filter to scope the data by a specific **department** or view the total for all departments.
- **Job Management Page:**
    - A searchable and filterable table of **all jobs** from **all users**.
    - Columns include Job ID, Filename, Uploader, Department, Status, Timestamp.
    - Each row is expandable to show details and provide download links for the PDF, JSON, and Excel files.
    - Includes the "Retry" button for failed jobs.
- **User Management Page:**
    - A table of all users where admins can edit a user's `name`, `role`, and `department`.
- **Department Management Page:**
    - An interface to `Create`, `Rename`, and `Delete` departments.
- **Document Type Management Page:**
    - An interface to create new document types by uploading a `prompt.txt` and `schema.json`.
    - A sub-section to manage which document types are accessible to which departments.
- **Global Settings Page:**
    - A form to securely input and update the global Gemini API key.

#### **User Portal**

- **Dashboard:**
    - Displays performance metrics scoped to the user's **department only**.
    - Widgets will be similar to the admin dashboard but will only reflect data from their department.
- **Job Management Page:**
    - A searchable table of jobs submitted by the logged-in user **and** all other users within their department.
    - Provides the same review, download, and re-trigger functionality as the admin portal, but only for this subset of jobs.
- **Immediate Upload Page:**
    - A file upload interface where the user can select a document type from a dropdown (list is filtered by their department's allowed types).
    - Upon upload, shows the real-time progress bar powered by WebSockets.
    - Once complete, provides immediate download links for the JSON and Excel files.
- **Profile Management Page:**
    - A simple page where users can edit their own `password`.

    
